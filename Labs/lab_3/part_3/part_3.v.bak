module part_3(SW, LEDR, HEX);
	input [9:0] SW;
	output [9:0] LEDR;
	output [5:0] HEX;
	
	wire wire_to_hex
	
   arithmetic_logic_unic a0(
			.A(SW[7:4]),
			.B(SW[3:0]),
			.ALUout(LEDR[7:0]),
			.ALUout(wire_to_hex)
			);
	
	out_to_hex a1(
			.A(SW[7:4]),
			.B(SW[3:0]),
			.C(wire_to_hex),
			.HEX0_out(HEX0[6:0]),
			.HEX1_out(HEX1[6:0]),
			.HEX2_out(HEX2[6:0]),
			.HEX3_out(HEX3[6:0]),
			.HEX4_out(HEX4[6:0]),
			.HEX5_out(HEX5[6:0])
			);

endmodule

module arithmetic_logic_unit(A, B, ALUout);
	input [3:0]A;
	input [3:0]B;
	output [7:0]ALUout;
	
	assign A = {3'b000, A};
	assign B = {3'b000, B};
	
	adder_curcuit_A_+_1 u0(
			.X(A[3:0]),
			.Y(4'b0001),
			.cin(1'b0),
			.S(ALUout[3:0]),
			.cout(ALUout[7:4])
			);
	
	adder_curcuit_A_+_B u1(
			.X(A[3:0]),
			.Y(B[3:0]),
			.cin(1'b0),
			.S(ALUout[3:0]),
			.cout(ALUout[7:4])
			);
	
	arithmetic_op u2(
			.X(A[3:0]),
			.Y(B[3:0]),
			.S(ALUout[7:0]),
			);
			
	xor_or u3(
			.X(A[3:0]),
			.Y(B[3:0]),
			.S(ALUout[7:0]),
			);
	
	one_or_zero u4(
			.X(A[3:0]),
			.Y(B[3:0]),
			.S(ALUout[7:0]),
			);
	
	Input_equals_output u5(
			.X(A[3:0]),
			.Y(B[3:0]),
			.S(ALUout[7:0]),
			);
			
endmodule

module adder_curcuit_A_+_B(X, Y, cin, S, cout);
	input [3:0]X;
	input [3:0]Y;
	input cin;
	output [3:0]S;
	output cout;
		
	wire Carry_wire0, Carry_wire1, Carry_wire2;
	
	four_bit_adder_piece f0(
			.a(X[0]),
			.b(Y[0]),
			.cin(cin),
			.cout(Carry_wire0),
			.s(S[0])
			);
	
	four_bit_adder_piece f1(
			.a(X[1]),
			.b(Y[1]),
			.cin(Carry_wire0),
			.cout(Carry_wire1),
			.s(S[1])
			);
	
	four_bit_adder_piece f2(
			.a(X[2]),
			.b(Y[2]),
			.cin(Carry_wire1),
			.cout(Carry_wire2),
			.s(S[2])
			);
			
	four_bit_adder_piece f3(
			.a(X[3]),
			.b(Y[3]),
			.cin(Carry_wire2),
			.cout(cout),
			.s(S[3])
			);
			
	assign cout = {3'b000, cout};
		
	
endmodule

module four_bit_adder_piece(a, b, cin, cout, s);
	input a;
	input b;
	input cin;
	output cout;
	output s;
	
	mux2to1 m0(
			.x(b),
			.y(cin),
			.sel(a^b),
			.m(cout)
			);
	
	assign s = (a^b)^cin;
	
endmodule

module mux2to1(x, y, sel, m);
	input x;
	input y;
	input sel;
	output m;
	
	assign m = (x&~sel) | (y&sel);
	
endmodule

module adder_curcuit_A_+_B(X, Y, cin, S, cout);
	input [3:0]X;
	input [3:0]Y;
	input cin;
	output [3:0]S;
	output cout;
		
	wire Carry_wire0, Carry_wire1, Carry_wire2;
	
	four_bit_adder_piece f0(
			.a(X[0]),
			.b(Y[0]),
			.cin(cin),
			.cout(Carry_wire0),
			.s(S[0])
			);
	
	four_bit_adder_piece f1(
			.a(X[1]),
			.b(Y[1]),
			.cin(Carry_wire0),
			.cout(Carry_wire1),
			.s(S[1])
			);
	
	four_bit_adder_piece f2(
			.a(X[2]),
			.b(Y[2]),
			.cin(Carry_wire1),
			.cout(Carry_wire2),
			.s(S[2])
			);
			
	four_bit_adder_piece f3(
			.a(X[3]),
			.b(Y[3]),
			.cin(Carry_wire2),
			.cout(cout),
			.s(S[3])
			);
			
	assign cout = {3'b000, cout};
		
	
endmodule

module four_bit_adder_piece(a, b, cin, cout, s);
	input a;
	input b;
	input cin;
	output cout;
	output s;
	
	mux2to1 m0(
			.x(b),
			.y(cin),
			.sel(a^b),
			.m(cout)
			);
	
	assign s = (a^b)^cin;
	
endmodule

module mux2to1(x, y, sel, m);
	input x;
	input y;
	input sel;
	output m;
	
	assign m = (x&~sel) | (y&sel);
	
endmodule

module arithmetic_op(X, Y, S);
	input [3:0]X;
	input [3:0]Y;
	output [7:0]S;
	
	assign S = X + Y;

endmodule

module xor_or(X, Y, S);
	input [3:0]X;
	input [3:0]Y;
	output [7:0]S;
	
	assign S0 = X^Y;
	assign S1 = X|Y;
	assign S = {S1, S0};
	
endmodule

module one_or_zero(X, Y, S);
	input [3:0]X;
	input [3:0]Y;
	output [7:0]S;
	
	mux2to1 m0(
			.a(4'0001),
			.b(4'0000),
			.sel
	
	
	
